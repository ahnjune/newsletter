# Copyright:: Copyright (c) 2007 Amazon Technologies, Inc.
# License::   Apache License, Version 2.0

require 'test/unit/testcase'
require 'ruby-aws'
require 'amazon/webservices/mturk/question_generator'
require 'amazon/webservices/util/soap_transport'
require 'amazon/webservices/util/rest_transport'
require 'amazon/webservices/util/mock_transport'


class TestChangeHITTypeOfHIT < Test::Unit::TestCase
  include Amazon::WebServices

  def setup
    # Setting up the default requester interface.  
    #   This will default to running against Sandbox, but we specify the host explicitly for safety. 
    #   Access Key ID and Secret Access Key will be loaded from user preference file
    #     If not found, the user will be interatively queried for their authentication information.
    @@mturk    ||= Amazon::WebServices::MechanicalTurkRequester.new :Host => :Sandbox if ENV['DISABLE_MTURK_SANDBOX_TEST'].nil?

    # set up a mock version of the service
    @@mock     ||= Amazon::WebServices::Util::MockTransport.new
    @@mockturk ||= Amazon::WebServices::MechanicalTurkRequester.new( :Transport => @@mock, :AWSAccessKey => 'bogus', :AWSAccessKeyId => 'fake' )

    # lets just build this question once
    @@question ||= MTurk::QuestionGenerator.build { |q| q.ask 'Have you tried changing the description of a HIT?' }
  end

  def testUpdateHITMock
    @@mock.listen do |call|
      case call.name
      when :GetHIT
        {:HIT => {:HITId => call.request[:HITId], :Title => "old title", :Description => "foo", :Request => {} } }
      when :RegisterHITType
        {:RegisterHITTypeResult => {:HITTypeId => 'mockHITType', :Request => {} } }
      else
        {}
      end
    end

    hit = @@mockturk.updateHIT( 'mockHIT', { :Title => 'new title' } )
    assert_equal :GetHIT, @@mock.next.name

    ht = @@mock.next
    assert_equal :RegisterHITType, ht.name
    assert_equal "new title", ht.request[:Title]
    assert_equal "foo", ht.request[:Description]

    update = @@mock.next
    assert_equal :ChangeHITTypeOfHIT, update.name
    assert_equal 'mockHIT', update.request[:HITId]
    assert_equal 'mockHITType', update.request[:HITTypeId]
  end

  # Allow user to skip these tests by setting the DISABLE_MTURK_SANDBOX_TEST environment variable
  if ENV['DISABLE_MTURK_SANDBOX_TEST'].nil?

  def testHappyCase
    hit_result = @@mturk.createHIT :Title => 'Ruby SDK Test Hit (ChangeHITTypeOfHIT)',
                                  :Description => 'Autogenerated ruby-aws test case description1',
                                  :Keywords => 'Ruby, test, SDK, changehittypeofhit, description1',
                                  :Reward => { :Amount => 0.01, :CurrencyCode => 'USD' },
                                  :Question => @@question
    new_hit_type = @@mturk.registerHITType :Title => 'Ruby SDK Test Hit (ChangeHITTypeOfHIT) - Updated',
                                          :Description => 'Autogenerated ruby-aws test case description2',
                                          :Keywords => 'Ruby, test, SDK, changehittypeofhit, description2',
                                          :Reward => { :Amount => 0.01, :CurrencyCode => 'USD' }
    @@mturk.changeHITTypeOfHIT :HITId => hit_result[:HITId],
                              :HITTypeId => new_hit_type[:HITTypeId]
    updated_hit = @@mturk.getHIT :HITId => hit_result[:HITId]
    assert_equal new_hit_type[:HITTypeId], updated_hit[:HITTypeId], 'HITTypeId of ' + hit_result[:HITId] + ' not updated'
    @@mturk.forceExpireHIT :HITId => hit_result[:HITId]
    @@mturk.disposeHIT :HITId => hit_result[:HITId]
  end

  def testUpdateHIT
    hit_result = @@mturk.createHIT :Title => 'Ruby SDK Test Hit (ChangeHITTypeOfHIT)',
                                  :Description => 'Autogenerated ruby-aws test case description1',
                                  :Keywords => 'Ruby, test, SDK, changehittypeofhit, description1',
                                  :Reward => { :Amount => 0.01, :CurrencyCode => 'USD' },
                                  :Question => @@question
    new_template = { :Title => 'Ruby SDK Test Hit (ChangeHITTypeOfHIT) - Updated',
                     :Description => 'Autogenerated ruby-aws test case description2',
                     :Keywords => 'Ruby, test, SDK, changehittypeofhit, description2',
                     :Reward => { :Amount => 0.01, :CurrencyCode => 'USD' } }
    @@mturk.updateHIT(hit_result[:HITId], new_template)
    assert_not_equal hit_result[:HITTypeId], @@mturk.getHIT(:HITId=>hit_result[:HITId])[:HITTypeId], 'HITTypeId not changed'
    @@mturk.forceExpireHIT :HITId => hit_result[:HITId]
    @@mturk.disposeHIT :HITId => hit_result[:HITId]
  end

  def testUpdateHITs
    hit_result1 = @@mturk.createHIT :Title => 'Ruby SDK Test Hit (ChangeHITTypeOfHIT)',
                                   :Description => 'Autogenerated ruby-aws test case description1',
                                   :Keywords => 'Ruby, test, SDK, changehittypeofhit, description1',
                                   :Reward => { :Amount => 0.01, :CurrencyCode => 'USD' },
                                   :Question => @@question
    hit_result2 = @@mturk.createHIT :Title => 'Ruby SDK Test Hit (ChangeHITTypeOfHIT)',
                                   :Description => 'Autogenerated ruby-aws test case description1',
                                   :Keywords => 'Ruby, test, SDK, changehittypeofhit, description1',
                                   :Reward => { :Amount => 0.01, :CurrencyCode => 'USD' },
                                   :Question => @@question
    hit_result3 = @@mturk.createHIT :Title => 'Ruby SDK Test Hit (ChangeHITTypeOfHIT)',
                                   :Description => 'Autogenerated ruby-aws test case description1',
                                   :Keywords => 'Ruby, test, SDK, changehittypeofhit, description1',
                                   :Reward => { :Amount => 0.01, :CurrencyCode => 'USD' },
                                   :Question => @@question
    new_template = { :Title => 'Ruby SDK Test Hit (ChangeHITTypeOfHIT) - Updated',
                     :Description => 'Autogenerated ruby-aws test case description2',
                     :Keywords => 'Ruby, test, SDK, changehittypeofhit, description2',
                     :Reward => { :Amount => 0.01, :CurrencyCode => 'USD' } }

    @@mturk.updateHITs(new_template, [hit_result1[:HITId], hit_result2[:HITId], hit_result3[:HITId]])

    assert_not_equal hit_result1[:HITTypeId], @@mturk.getHIT(:HITId=>hit_result1[:HITId])[:HITTypeId], 'HITTypeId not changed'
    assert_not_equal hit_result2[:HITTypeId], @@mturk.getHIT(:HITId=>hit_result2[:HITId])[:HITTypeId], 'HITTypeId not changed'
    assert_not_equal hit_result3[:HITTypeId], @@mturk.getHIT(:HITId=>hit_result3[:HITId])[:HITTypeId], 'HITTypeId not changed'
    @@mturk.forceExpireHIT :HITId => hit_result1[:HITId]
    @@mturk.disposeHIT :HITId => hit_result1[:HITId]
    @@mturk.forceExpireHIT :HITId => hit_result2[:HITId]
    @@mturk.disposeHIT :HITId => hit_result2[:HITId]
    @@mturk.forceExpireHIT :HITId => hit_result3[:HITId]
    @@mturk.disposeHIT :HITId => hit_result3[:HITId]
  end

  end # if not DISABLE_MTURK_SANDBOX_TEST

end

